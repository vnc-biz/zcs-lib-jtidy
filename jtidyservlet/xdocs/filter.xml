<?xml version="1.0" encoding="UTF-8"?>
<document>
  <properties>
    <title>JTidyFilter</title>
    <author email="vlads(at)users.sourceforge.net">Vlad Skarzhevskyy</author>
  </properties>
  <body>
    <section name="Filter Overview">
      <p>
        The Java Servlet specification includes component type, called a filter.
        A filter dynamically intercepts requests and responses to transform or use the information contained in the requests or responses.
        Filters typically do not themselves create responses, but instead provide universal functions that can be "attached" to any type of servlet or JSP page.
        Filters can be used to transform the response from a servlet or a JSP page.
      </p>
      <p>
        For more help with Filters in general, please see:<br/>
            <a href="http://java.sun.com/products/servlet/Filters.html">The Essentials of Filters @java.sun.com</a><br/>
            <a href="http://www.javaworld.com/javaworld/jw-06-2001/jw-0622-filters.html">Filter code with Servlet 2.3 model @javaworld.com</a>
      </p>
    </section>

    <section name="What JTidyFilter does?">
      <p>
        The JTidyFilter dynamically intercepts responses generated by your JSPs or servlets and changes or validate HTML using JTidy.
        It does the same job as <a href="./tagreference-jtidy-taglib-12.html#tidy"> <code><![CDATA[<jtidy:tidy>..</jtidy:tidy>]]></code></a> JSP Tags.
        When using filter you don't need to modify your applictions JSP. Also it will work when HTML is denerated by non JSP servlets or by static HTML files.
      </p>
    </section>

    <section name="JTidyFilter configuration">
      <p>A Filter is a component that is invoked when a client requests a resource that the Filter is mapped to,
         such as a URL pattern or a Servlet name.
         You can apply a filter to certain URL patterns or servlet names using the <code><![CDATA[<filter-mapping>]]></code> tag in web.xml.
      </p>
                   <source><![CDATA[
<filter-mapping>
    <filter-name>JTidyFilter</filter-name>
    <url-pattern>/servlet/Foo</url-pattern>
</filter-mapping>
<filter-mapping>
    <filter-name>JTidyFilter</filter-name>
    <url-pattern>*.jsp</url-pattern>
</filter-mapping>
                    ]]></source>
      <p>
        <![CDATA[<url-pattern>]]> A pattern matching the url: /foo/*, *.foo or /foo  the same as <![CDATA[<url-pattern>]]> in <![CDATA[<servlet-mapping>]]>
        A servlet container interprets the <em>url-pattern</em> according to the following rules:
        <ul>
            <li><strong>/foo/*</strong> A string beginning with a / and ending with the /* characters is used for determining a servlet path mapping.</li>
            <li><strong>*.foo</strong>   A string beginning with a *. prefix is used to map the request to a Filter that handles the extension specified in the string.</li>
            <li><strong>/foo</strong>   All other strings are used as exact matches only.</li>
        </ul>
      </p>

      <p>
        FYI: <a href="http://livedocs.macromedia.com/jrun/4/Programmers_Guide/filters4.htm#1125330">Macromedia example</a>, to map a filter to all JSPs in a web
        application's context <code><![CDATA[<url-pattern>]]>/*.jsp<![CDATA[</url-pattern>]]></code>
        Is not valid example and does not work in JRun 4 and Tomcat 5
      </p>


      <subsection name="JTidyFilter init-param">
      <p>
        All <code><![CDATA[<init-param>]]></code> are optional for JTidyFilter.
      </p>
      <p>
        Example of Filter configuration in <code>/WEB-INF/web.xml</code> file.
      </p>
                   <source><![CDATA[
<web-app>
    ...
    <filter>
        <filter-name>JTidyFilter</filter-name>
        <filter-class>org.w3c.tidy.servlet.filter.JTidyFilter</filter-class>
        <init-param>
            <param-name>properties.filename</param-name>
            <param-value>MyJTidyServlet.properties</param-value>
        </init-param>
        <init-param>
            <param-name>tee</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>config</param-name>
            <param-value>indent: auto; indent-spaces: 2</param-value>
        </init-param>
        <init-param>
            <param-name>doubleValidation</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>validateOnly</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>doubleValidation</param-name>
            <param-value>false</param-value>
        </init-param>
    </filter>
    ...
</web-app>

                    ]]></source>
        <table>
          <thead>
            <tr>
              <th><code><![CDATA[<init-param>]]></code></th>
              <th>Default</th>
              <th>Valid Values</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>tee</td>
              <td>false</td>
              <td>true, false</td>
              <td>Do not buffer the output, Preform validation only.
                  This may send the responce back to browser while we are still parsing the HTML.
                  May solve problem for some applications that are flushing the OutputStream.</td>
            </tr>
            <tr>
              <td>validateOnly</td>
              <td>false</td>
              <td>true, false</td>
              <td>validateOnly only do not change output.</td>
            </tr>
            <tr>
              <td>doubleValidation</td>
              <td>false</td>
              <td>true, false</td>
              <td>Performs validation of html processed by <code><![CDATA[<jtidy:tidy>]]></code> jsp tag
                  By default this is not done. Only Usefull for testing JTidy.
                  This will create second requestID to store the data.
              </td>
            </tr>
            <tr>
              <td>config</td>
              <td></td>
              <td>String, <code>name: value;</code></td>
              <td>JTidy Parser configutation string. Examples of config string: <code>indent: auto; indent-spaces: 2</code>
              </td>
            </tr>
            <tr>
              <td>properties.filename</td>
              <td></td>
              <td>String</td>
              <td>Custom properties file path. See: <a href="./configuration.html">Configuration</a>
              </td>
            </tr>

          </tbody>
        </table>

      </subsection>

    </section>

  </body>
</document>